---
title: "01_Running-RNAseq_pipeline"
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    eval: false
editor: visual
editor_options: 
  chunk_output_type: console
---

**Aim:** To execute the bioinformatics pipeline that can be used to analyse RNA sequencing data obtained from organisms with a reference genome and annotation (mouse in case). It takes a samplesheet and FASTQ files as input, performs quality control (QC), trimming, alignment, and quantification to produce a gene expression matrix and extensive QC report.

## Github repo

I first created a github repo in my personal account and staged the necessary files to be tracked and pushed to Github repo. The github link for the project can be found here: <https://github.com/adityamiyer-personal/Bulk-RNA-seq-analysis>.

## Using the nf-core pipeline to perform preprocessing of the RNA-seq FASTQs

nf-core RNA-seq allows us to perform the basic processing of RNA-seq reads in a reproducing fashion. I first set up a conda environment to run nf-core RNAseq pipeline. More information about this open-source pipeline can be found at <https://nf-co.re/rnaseq/3.14.0/>.

### Creation and setting up of conda environment

```{r Creation of conda environment}
#Creation of conda environment
conda create -n bulkrnaseq

#Activation of conda environment
conda activate bulkrnaseq

#install nextflow
conda install -c bioconda nextflow
conda install -c conda-forge openjdk=11.0.9.1
conda install -c conda-forge singularity==3.8.6

#Setting the channel priortiy list required for Nextflow
conda config --add channels defaults
conda config --add channels bioconda
conda config --add channels conda-forge

conda config --set channel_priority disabled

conda install -n base conda-libmamba-solver
```

### Test nfcore rnaseq run

After setting up the conda environment, I performed a test run to check if the config and local machine support the test run or not. I have used **3.14.0** version of the pipeline therefore went ahead with that.

The script used to perform the test run in the conda environment is given below:

```{r Test nfcore run}
#in the conda environment, run
nextflow run nf-core/rnaseq -r 3.14.0 \
  -profile test,conda \
  --outdir /Users/adityamiyer/Documents/BiostateAI/results/test_output/ \
  -work-dir /Users/adityamiyer/Documents/BiostateAI/results/test_workdir/
```

### Samplesheet

As given in the guidelines, the samplesheet follows the guidelines as given here <https://nf-co.re/rnaseq/3.14.0/docs/usage/> and <https://nf-co.re/rnaseq/3.14.0/parameters> . I set the strandedness value to **auto**, the pipeline will sub-sample the input FastQ files to 1 million reads, use Salmon Quant to automatically infer the strandedness, and then propagate this information through the rest of the pipeline.Â 

```{r Creation of samplesheet}
#| eval: true
#| include: true
#| warning: false
library(tidyverse)
readr::read_csv("~/Documents/BiostateAI/samplesheet/samplesheet.csv") %>% select(1:4) %>% knitr::kable()
```

### nf-core run with the liver and heart samples

I used the **star_salmon workflow** of nf-core rnaseq pipeline (Version 3.16.1) that performs alignment using **STAR** and read quantification using **Salmon**

The general command that could be run on a HPC or server would look like below:

```{r A general run on a server}
nextflow run nf-core/rnaseq -r 3.14.0 \
  -profile conda \
  --outdir /Users/adityamiyer/Documents/BiostateAI/results/output/ \
  -work-dir /Users/adityamiyer/Documents/BiostateAI/results/workdir/ \
  --input /Users/adityamiyer/Documents/BiostateAI/samplesheet/samplesheet.csv \
  --gtf ~/Documents/BiostateAI/data/fastqs/gencode.vM35.basic.annotation.gtf \
  --fasta ~/Documents/BiostateAI/data/fastqs/GRCm39.primary_assembly.genome.fa.gz \
  --aligner star_salmon --gencode -resume
```

**Status:** The above run keeps failing due to memory issues in my system. I need access to a HPC to execute this pipeline.

Due to memory limitations on my personal laptop, I resorted to the following command skipping all the various QC steps of the pipeline. Despite adding in memory and cpu limits, the star_salmon alignment strategy does not get executed in my PC.

```{r nfcore run with liver and heart samples}
#in the conda environment, run
nextflow run nf-core/rnaseq -r 3.14.0 \
  -profile conda \
  --outdir /Users/adityamiyer/Documents/BiostateAI/results/output/ \
  -work-dir /Users/adityamiyer/Documents/BiostateAI/results/workdir/ \
  --input /Users/adityamiyer/Documents/BiostateAI/samplesheet/samplesheet.csv \
  --gtf ~/Documents/BiostateAI/data/fastqs/gencode.vM35.basic.annotation.gtf \
  --fasta ~/Documents/BiostateAI/data/fastqs/GRCm39.primary_assembly.genome.fa.gz \
  --aligner star_salmon --gencode -resume --max_cpus 8 --max_memory 8.GB --trimmer 'fastp' \
  --skip_markduplicates --skip_rseqc --skip_preseq --skip_dupradar --skip_qualimap
```

**Status:** The above run keeps failing after initial QC due to memory issues. I need access to a HPC or server to execute this pipeline.

To circumvent this issue, I am trying with using pseudoaligner **Kallisto** instead of memory-intensive STAR and also added in memory,cpu limits. I also set the strandedness of the libraries to "forward" so that Salmon index (memory-intensive again) is not run during the pipeline run. 

```{r}
nextflow run nf-core/rnaseq -r 3.14.0 \
  -profile conda \
  --outdir /Users/adityamiyer/Documents/BiostateAI/results/output/ \
  -work-dir /Users/adityamiyer/Documents/BiostateAI/results/workdir/ \
  --input /Users/adityamiyer/Documents/BiostateAI/samplesheet/samplesheet.csv \
  --gtf ~/Documents/BiostateAI/data/fastqs/gencode.vM35.basic.annotation.gtf \
  --fasta ~/Documents/BiostateAI/data/fastqs/GRCm39.primary_assembly.genome.fa.gz \
  --gencode -resume --max_cpus 8 --max_memory 8.GB --trimmer 'fastp' \
  --skip_markduplicates --skip_rseqc --skip_preseq --skip_dupradar --skip_qualimap --skip_alignment \
  --pseudo_aligner kallisto --skip_gtf_filter --skip_gtf_transcript_filter
```

**Status:** 