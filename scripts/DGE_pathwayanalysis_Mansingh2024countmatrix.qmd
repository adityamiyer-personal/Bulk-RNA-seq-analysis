---
title: "SampleAnalysis_Mansingh2024_matrix"
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    eval: true
    warning: false
    message: false
editor: visual
editor_options: 
  chunk_output_type: console
---

**Aim:** To perform differential gene expression analysis for different contrasts

## Loading the required libraries and importing required files

### Loading the required libraries

```{r Loading libraries}
library(tidyverse) #for data wrangling
library(DESeq2) #for DEG analysis
library(genekitr) #for pathway analysis
library(readr) #for data import
library(eatTools) #for rbind functions
library(strex) #for string related functions
library(knitr) #for beautiful tables
library(gt) #for customized table layouts
library(ComplexHeatmap) #for beautiful heatmaps
library(tidyheatmaps) #for heatmap generation from dataframe
library(patchwork) #for adding multiple figures to a plot
library(RColorBrewer) #for color schemas
library(ggplot2) #for plotting
library(ExploreModelMatrix) #to explore complicated design in the DESeq2 formula
```

### Importing the counts matrix

```{r Importing the counts and conversion to a DESeq object}
#loading the length-scaled counts tsv file
cts <- read.csv("~/Documents/BiostateAI/data/Mansingh2024_expression_matrix.txt",sep="\t", header=T) 

#converting NA into 0 and round off the counts
cts[is.na(cts)] = 0
cts <- cts %>% mutate_if(is.numeric, list(round))
```

### Loading the metadata file

```{r Import metadata file}
genotype = as.factor( str_detect( colnames(cts) , 'CTRL' )  )
genotype = revalue( genotype , c( 'TRUE'="WT" , 'FALSE' = 'KO'  )  ) #TRUE is WT, FALSE is CTRL

time_point = factor( substring(colnames(cts), regexpr("_Z",colnames(cts)) + 2) , levels = c("T0",'T4','T8','T12','T16','T20'))

mouse = sapply( strsplit( colnames( cts ) , "_") , '[' , 5)

replicate = substring(colnames(cts) , 1, nchar( "HL3YYBGX5" ) ) 

coldata <- data.frame( sample = colnames(cts) ,
                       genotype = genotype ,
                       time_point = time_point,
                       mouse = mouse,
                       replicate = replicate
                       )

coldata <- coldata %>% filter(time_point %in% c("T0", "T12"))
coldata$time_point <- factor(coldata$time_point, levels = c("T0", "T12"))

cts %>% rownames_to_column("gene") %>% mutate(gene1 = transId(gene, transTo = "symbol", org = "mouse", unique = T, keepNA = T)$symbol) %>%
  select(-gene) %>% 
  select(gene1, everything()) %>% 
  drop_na(gene1) %>% 
  filter()
  column_to_rownames("gene1") %>%
  
cts <- cts %>% select(coldata$sample)

coldata %>% gt()

coldata %>% dplyr::count(genotype,time_point)
```

## Creation and exploration of dds object

```{r Importing length-scaled counts and conversion to a DESeq object}
#| layout-ncol: 3
#| fig-cap: 
#|   - "Factorial design without interaction"
#|   - "p-value histogram without prefiltering of counts"
#|   - "Genes with high p-values do seem to have lower gene expression"

#creation of dds object without prefiltering
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = coldata,
                              design = ~ genotype + time_point) #paired design tissue + time if need to adjust for confounders (time in this case)

vd <- VisualizeDesign(sampleData = coldata,
                      designFormula = ~ genotype + time_point)
vd$plotlist

dds$genotype <- relevel(dds$genotype, ref = "TRUE")

dds <- DESeq(dds) #Main effects for genotype #Expression affected by genotype not correcting for  the timepoint effects

resultsNames(dds)

res <- results(dds, contrast = c("genotype", "FALSE", "TRUE")) #FALSE is KO, WT is TRUE and is in the denominator

res %>% as.data.frame() %>%
  arrange(padj) %>%
  ggplot(aes(x = pvalue)) +
  geom_histogram(color = "white", bins = 50) +
  ggtitle("p-value histogram without prefiltering of counts")

res %>% as.data.frame() %>%
  rownames_to_column("gene_id") %>%
  filter(!is.na(pvalue)) %>%
  mutate(pvalue_bin = if_else(pvalue > 0.75, "high", "low")) %>%
  ggplot(aes(x = pvalue_bin, y = log2(baseMean))) + 
  geom_boxplot()
```

p-value histogram distribution looks bimodal. Therefore, the counts needs prefiltering before DEG analysis. High expressing count genes fall into low p-value bin which is great. 

```{r Prefiltering of counts using the dds object}
dds <- dds[rowSums(counts(dds) > 10,)]
dds <- DESeq(dds)
resultsNames(dds)

res <- results(dds, contrast = c("genotype", "FALSE", "TRUE")) #FALSE is KO, WT is TRUE and is in the denominator

#| layout-ncol: 2
#| fig-cap: 
#|   - "p-value histogram after prefiltering of counts"
#|   - "Genes with high p-values do seem to have lower gene expression"

res %>% as.data.frame() %>%
  arrange(padj) %>%
  ggplot(aes(x = pvalue)) +
  geom_histogram(color = "white", bins = 50) +
  ggtitle("p-value histogram after prefiltering of counts")

res %>% as.data.frame() %>%
  rownames_to_column("gene_id") %>%
  filter(!is.na(pvalue)) %>%
  mutate(pvalue_bin = if_else(pvalue > 0.75, "high", "low")) %>%
  ggplot(aes(x = pvalue_bin, y = log2(baseMean))) + 
  geom_boxplot()
```

The p-value histogram after prefiltering of counts looks anti-conservative. Refer this link <http://varianceexplained.org/statistics/interpreting-pvalue-histogram/> for more info.

### PCA plot

```{r PCA plot}
vstcounts <- vst(dds, blind = T)
normalized_cts <- assay(vstcounts) %>% as.matrix()
pca_prcomp <- prcomp(t(normalized_cts), center = T, scale = F)
names(pca_prcomp)

PC1_and_PC2 <- data.frame(PC1 = pca_prcomp$x[,1],
                          PC2 = pca_prcomp$x[,2],
                          type = rownames(pca_prcomp$x))

#using the complete normalized matrix
ggplot(PC1_and_PC2, aes(x = PC1, y = PC2, col=type)) +
  geom_point() +
  geom_text(aes(label = type), hjust = 0, vjust = 0) +
  coord_fixed()

#using variable features
plotPCA(vstcounts, intgroup = c("genotype","time_point"))
```

### Sample correlation heatmap using vst counts

```{r Sample correlation heatmap using vst counts}
sampleCor <- cor(normalized_cts)
sampleDist <- as.dist(1 - cor(normalized_cts))
sampleDistMatrix <- as.matrix(sampleDist)
blueColours <- brewer.pal(9, "Blues")
colors <- colorRampPalette(rev(blueColours))(255)
pheatmap::pheatmap(sampleDistMatrix,
                   clustering_distance_cols = sampleDist, 
                   color = colors)
```

## Differential gene expression analysis

### Tissue-specific DEGs (the main effect)

Here, I am identifying tissue-specific (liver versus heart) DEGs. These DEGs would be liver- or heart-enriched. 

#### Identification of tissue-specific DEGs using DESeq2

```{r Identification of tissue-specific DEGs}
res <- results(dds, contrast = c("genotype", "FALSE", "TRUE")) #FALSE is KO, WT is TRUE and is in the denominator
#| layout-ncol: 2
#| fig-cap: 
#|   - "Number of identified DEGs (|logFC| > 1 & padj < 0.01)"
#|   - "Tissue-specific DEGs agnostic of the sampling timepoint"

res1 <- res %>%
  as.data.frame() %>%
  rownames_to_column("gene") %>%
  drop_na(log2FoldChange,padj) %>%
  mutate(DEG = case_when(log2FoldChange > 1 & padj < 0.01 ~ "up",
                         log2FoldChange < -1 & padj < 0.01 ~ "down",
                         TRUE ~ "non-sig"),
         comparison = "KO_vs_WT",
         enrichment = case_when(DEG == "up" ~ "KO",
                                DEG == "down" ~ "WT",
                                TRUE ~ "non-sig")) 

res1 %>%
  dplyr::count(enrichment) %>% gt()

#Volcano plot
EnhancedVolcano::EnhancedVolcano(res1,
                                 x = "log2FoldChange",
                                 y = "padj",
                                 lab = rownames(res1),
                                 pCutoff = 0.01,
                                 FCcutoff = 1,
                                 title = "Liver vs Heart comparison [Paired-design]",
                                 subtitle = "Differential expression analysis using DESeq2",
                                 labSize = 2.0
                                 )

#test this code
as_tibble(counts(dds[res1$gene[1:2], ], normalize = TRUE),
          rownames = 'gene') %>%
  pivot_longer(names_to = "sample", values_to = "counts", -gene) %>%
  left_join(as_tibble(colData(dds), rownames = "group")) %>%
  #mutate(name = paste0(substr(Type, 1, 5), '_', Condition, '_', 1:3)) %>%
  ggplot(aes(x = group, y = counts, fill = genotype)) +
  geom_bar(stat = 'identity', color = "gray30") +
  facet_wrap( ~ gene, scales = "free") +
  theme(axis.text.x = element_text(size = 8, angle = 90),
        axis.title.x = element_blank(),
        legend.position = "right",
        legend.text = element_text(size = 7),
        legend.title = element_text(size = 7))
```

#### Expression pattern of top tissue-specific DEGs

```{r Expression pattern of top tissue-specific DEGs}
significant_genes <- res1 %>%
  as.data.frame() %>%
  filter(padj > 0.01, abs(log2FoldChange) > 2) %>%
  slice_max(abs(log2FoldChange), 50) %>%
  rownames()
sig_mat <- normalized_cts[significant_genes,]
col_anno = HeatmapAnnotation(df = meta %>% select(tissue, time),
                             col = list(tissue = c("Heart" = "red", "Liver", "blue")))
Heatmap(t(scale(t(sig_mat))),
        top_annotation = col_anno,
        show_row_names = T,
        name = "Scaled normalized\nexpression"
        )

significant_genes <- res1 %>%
  as.data.frame() %>%
  filter(padj > 0.01, abs(log2FoldChange) > 2) %>%
  slice_max(abs(log2FoldChange), 12) %>%
  rownames()

boxplot_1 <- lapply(significant_genes, function(x) {
  plotCounts(dds, gene = x,
             intgroup = c("group"),
             returnData = T) %>%
    ggplot(aes(x = group, y = log2(count), fill = c("tissue", "time"))) +
    geom_boxplot() + geom_jitter(width = 0.1) + 
    xlab("Experimental group") + ylab("Normalized counts") +
    ggtitle(paste0(x))
    })
wrap_plots(boxplot_1, ncol = 3)                             
```

#### Pathway analysis using multiple pathway databases using tissue-specific DEGs

```{r Pathway enrichment analysis}
# perform pathway analysis using multiple pathway genesets
msigdb_gs <- geneset::getMsigdb(org = "mouse", category = "H")
go_gs <- geneset::getGO(org = "mouse", ont = "bp")
kegg_gs <- geneset::getKEGG(org = "mus", category = "pathway")

gene_set = list(msigdb_gs, go_gs, kegg_gs)

#empty lists for adding in the pathway results
barplots_1 <- list()
df1 = list()

for (i in 1:length(gene_set)) {
  go_results1 = safely(genORA)(res1 %>% filter(enrichment == "Liver") %>% pull(gene),
                               geneset = gene_set[[i]],
                               universe = rownames(res1))$result
  
  if (!is.null(go_results1)) {
    go_results1$geneset = gene_set[[i]]$type
    go_results1$enrichment = "Liver"
  }
  
  go_results2 = safely(genORA)(res1 %>% filter(enrichment == "Heart") %>% pull(gene),
                               geneset = gene_set[[i]],
                               universe = rownames(res1))$result
  
  if (!is.null(go_results2)) {
    go_results2$geneset = gene_set[[i]]$type
    go_results2$enrichment = "Heart"
  }
  
  df1 <- rbind_common(df1, go_results1, go_results2)
  
  barplots_1[[i]] <- plotEnrichAdv(head(go_results1, n = 10), head(go_results2, n = 10),
              plot_type = "one",
              term_metric = "FoldEnrich",
              stats_metric = "qvalue",
              xlim_left = 25, xlim_right = 15) +
  theme(legend.position = c(0.15, 0.9)) #+
  #scale_fill_discrete(name = "Pathways", labels = c(paste("Liver-enriched", gene_set[[i]]$type, "pathways"), 
   #                                                 paste("Heart-enriched", gene_set[[i]]$type, "pathways"))
}

#| fig-cap: "Tissue-level (Main effects) comparison and pathways associated with DEGs across multiple databases"
tidyheatmap(df = df1 %>% arrange(enrichment) %>% remove_rownames(),
            rows = Description,
            columns = enrichment,
            values = p.adjust,
            annotation_row = geneset,
            gaps_row = geneset,
            color_legend_min = 0,
            color_legend_max = 1.3,
            fontsize_row = 10,
            fontsize_col = 12
            )
```

### Time specific DEGs (the main effect)

Here, I am identifying time-specific (T0 vs T12). These DEGs would be T0- or T12-enriched. 

```{r}
#creation of dds object without prefiltering
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = meta,
                              design = ~ tissue + time) #paired design

vd <- VisualizeDesign(sampleData = meta,
                      designFormula = ~ time)
vd$plotlist

dds$tissue <- relevel(dds$tissue, ref = "T0")

dds <- DESeq(dds, test = "LRT", full = ~ tissue + time, reduced = ~ tissue) #Main effects for time #Expression affected by time

res2 <- results(dds, name = )
```


## Differential gene expression analysis using the interaction-design
