---
title: "02_DESeq2"
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    eval: true
    warning: false
    message: false
editor: visual
editor_options: 
  chunk_output_type: console
---

**Aim:** To perform differential gene expression analysis for different contrasts

## Loading the required libraries and importing required files

### Loading the required libraries

```{r Loading libraries}
library(tidyverse) #for data wrangling
library(DESeq2) #for DEG analysis
library(genekitr) #for pathway analysis
library(readr) #for data import
library(eatTools) #for rbind functions
library(strex) #for string related functions
library(knitr) #for beautiful tables
library(ComplexHeatmap) #for beautiful heatmaps
library(patchwork) #for adding multiple figures to a plot
library(RColorBrewer) #for color schemas
library(ggplot2) #for plotting
library(ExploreModelMatrix) #to explore complicated design in the DESeq2 formula
```

### Loading the metadata file

```{r Import metadata file}
meta = read_csv("/Users/adityamiyer/Documents/BiostateAI/samplesheet/samplesheet.csv") %>%
  mutate(group = paste0(tissue,"_", time))
```

### Importing the Kallisto output 

Refer this section <https://nf-co.re/rnaseq/3.14.0/docs/output/#pseudoalignment-and-quantification> to understand which output files and methods are suitable for further DEG analysis. I use the length-scaled counts generated by Salmon in order not to influence gene lengths in the overall quantification results and therefore DEGs on the basis of gene length.

```{r Importing the counts and conversion to a DESeq object}
#loading the length-scaled counts tsv file
cts <- read_tsv("~/Documents/BiostateAI/results/output/") %>% 
  select(-gene_id) %>%
  mutate(gene_name = toupper(gene_name))

#converting NA into 0 and round off the counts
cts[is.na(cts)] = 0
cts <- cts %>% mutate_if(is.numeric, list(round))
```

```{r Sample correlation heatmap}

```

## Creation and exploration of dds object

```{r Importing length-scaled counts and conversion to a DESeq object}
#| layout-ncol: 3
#| fig-cap: 
#|   - "Factorial design without interaction"
#|   - "p-value histogram without prefiltering of counts"
#|   - "Genes with high p-values do seem to have lower gene expression"

#creation of dds object without prefiltering
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = meta,
                              design = ~tissue + time)

vd <- VisualizeDesign(sampleData = meta,
                      designFormula = ~ tissue + time)
vd$plotlist

dds$tissue <- relevel(dds$tissue, ref = "Heart")

dds <- DESeq(dds)

resultsNames(dds)

res <- results(dds, contrast = c("tissue", "Liver", "Heart"))

res %>% as.data.frame() %>%
  arrange(padj) %>%
  ggplot(aes(x = pvalue)) %>%
  geom_histogram(color = "white", bins = 50) +
  ggtitle("p-value histogram without prefiltering of counts")

res %>% as.data.frame() %>%
  rownames_to_column("gene_id") %>%
  filter(!is.na(pvalue)) %>%
  mutate(pvalue_bin = if_else(pvalue > 0.75, "high", "low")) %>%
  ggplot(aes(x = pvalue_bin, y = log2(baseMean))) + 
  geom_boxplot()
```

p-value histogram distribution looks bimodal. Therefore, the counts needs prefiltering before DEG analysis.

```{r Prefiltering of counts using the dds object}
dds <- dds[rowSums(counts(dds) > 10,)]
dds <- DESeq(dds)
resultsNames(dds)

res <- results(dds, contrast = c("tissue", "Liver", "Heart"))

#| layout-ncol: 2
#| fig-cap: 
#|   - "p-value histogram after prefiltering of counts"
#|   - "Genes with high p-values do seem to have lower gene expression"

res %>% as.data.frame() %>%
  arrange(padj) %>%
  ggplot(aes(x = pvalue)) %>%
  geom_histogram(color = "white", bins = 50) +
  ggtitle("p-value histogram after prefiltering of counts")

res %>% as.data.frame() %>%
  rownames_to_column("gene_id") %>%
  filter(!is.na(pvalue)) %>%
  mutate(pvalue_bin = if_else(pvalue > 0.75, "high", "low")) %>%
  ggplot(aes(x = pvalue_bin, y = log2(baseMean))) + 
  geom_boxplot()
```

The p-value histogram after prefiltering of counts looks anti-conservative. Refer this link <http://varianceexplained.org/statistics/interpreting-pvalue-histogram/> for more info.

```{r PCA plot}
vstcounts <- vst(dds, blind = T)
normalized_cts <- assay(vstcounts) %>% as.matrix()
pca_prcomp <- prcomp(t(normalized_cts), center = T, scale = F)
names(pca_prcomp)

PC1_and_PC2 <- data.frame(PC1 = pca_prcomp$x[,1],
                          PC2 = pca_prcomp$x[,2],
                          type = rownames(pca_prcomp$x))

#using the complete normalized matrix
ggplot(PC1_and_PC2, aes(x = PC1, y = PC2, col=type)) +
  geom_point() +
  geom_text(aes(label = type), hjust = 0, vjust = 0) +
  coord_fixed()

#using variable features
plotPCA(vstcounts, intgroup = c("tissue", "time"))
```


```{r Sample correlation heatmap using vst counts}
sampleCor <- cor(normalized_cts)
sampleDist <- as.dist(1 - cor(normalized_cts))
sampleDistMatrix <- as.matrix(sampleDist)
blueColours <- brewer.pal(9, "Blues")
colors <- colorRampPalette(rev(blueColours))(255)
pheatmap::pheatmap(sampleDistMatrix,
                   clustering_distance_cols = sampleDist, 
                   color = colors)
```

## DEG analysis

### Tissue-specific DEGs (the main effect)

Here, I am identifying tissue-specific (liver versus heart) DEGs.

```{r Identification of tissue-specific DEGs}
res1 <- results(dds, contrast = c("tissue", "Liver", "Heart")) %>% as.data.frame()

#| layout-ncol: 2
#| fig-cap: 
#|   - "Number of identified DEGs (|logFC| > 1 & padj < 0.01)"
#|   - "Tissue-specific DEGs agnostic of the sampling timepoint"

res1 <- res1 %>%
  mutate(DEG = case_when(log2FoldChange > 1 & padj < 0.01 ~ "up",
                         log2FoldChange < -1 & padj < 0.01 ~ "down",
                         TRUE ~ "non-sig"),
         comparison = "Liver_vs_Heart",
         enrichment = case_when(DEG == "up" ~ "Liver",
                                DEG == "down" ~ "Heart",
                                TRUE ~ "non-sig")) 

res1 %>%
  count(enrichment) %>% kable()

#Volcano plot
EnhancedVolcano::EnhancedVolcano(res1,
                                 x = "log2FoldChange",
                                 y = "padj",
                                 lab = rownames(res1),
                                 pCutoff = 0.01,
                                 FCcutoff = 1,
                                 title = "Liver vs Heart comparison agnostic of the sampling timepoints",
                                 subtitle = "Differential expression analysis using DESeq2",
                                 labSize = 2.0
                                 )

ix = which.min(res1$padj)
assay(dds)[ix,] %>% ggplot(aes(x = ))
```

```{r Expression pattern of top tissue-specific DEGs}
significant_genes <- res1 %>%
  as.data.frame() %>%
  filter(padj > 0.01, abs(log2FoldChange) > 2) %>%
  slice_max(abs(log2FoldChange), 50) %>%
  rownames()
sig_mat <- normalized_cts[significant_genes,]
col_anno = HeatmapAnnotation(df = meta %>% select(tissue, time),
                             col = list(tissue = c("Heart" = "red", "Liver", "blue")))
Heatmap(t(scale(t(sig_mat))),
        top_annotation = col_anno,
        show_row_names = T,
        name = "Scaled normalized\nexpression"
        )

significant_genes <- res1 %>%
  as.data.frame() %>%
  filter(padj > 0.01, abs(log2FoldChange) > 2) %>%
  slice_max(abs(log2FoldChange), 12) %>%
  rownames()
boxplot_1 <- lapply(significant_genes, function(x) {
  plotCounts(dds, gene = x,
             intgroup = c("group"),
             returnData = T) %>%
    ggplot(aes(x = group, y = log2(count))) +
    geom_boxplot() + geom_jitter(width = 0.1) + 
    xlab("Experimental group") + ylab("Normalized counts") +
    ggtitle(paste0(x))
    })
wrap_plots(boxplot_1, ncol = 3)                             
```

```{r Pathway enrichment analysis}

```

### Time specific DEGs (the main effect)

Here, I am identifying time-specific (T0 vs T12).

```{r}

```
